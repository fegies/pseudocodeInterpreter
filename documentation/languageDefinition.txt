This is the syntax definition that the pseudocode will use.

Internally it works by using an execution stack that all operations are pushed onto.

The language contains rudimentary objects.

An object must be of a priorly defined class.
It may then be instanciated using the keyword new and assingned to a variable.
The programmer need not worry about freeing used variables or memory usage is it is done using the
internal garbage collector.

although these objects are objetcs they behave more like c structs, both in terms of access of its fields
and because they cannot contain functions.

It is fundamentally impossible to copy objects. if the assingnment operator is used on an object, it will pass a reference.
if the programmer really wishes to copy the object, he has to create a new object and overwrite all the fields inside the struct.

The following segment is a crude description of the languages grammar.

In the redefinition I am trying to implement an "Everything is an expression" scheme similar to HAXE.

The Program consists of a block that is evaluated top to bottom.
(This is the only block that is allowed to contain multiple Expressions without being contained by curly braces)

For the exact syntax please refer to the yacc file in the documentation folder.
