Before an object can be created it must be defined as a class first.

A class definition may be done anywhere within the source code.
Class definitions follow the standart scoping rules.
Ergo: when control flow leaves a block, any class definitions inside that
block are rendered invalid.

class definitions are made using the following syntax:

class <name> {
	member definitions
};

a member definiton consists of a type name
(int,string,class name)
and a reference name.
example:

int num
node left

The member definitions may be delimited using newlines or semicolons.

Objects must be instanciated using the keyword
new

The keyword new is a builtin function that takes a class variable and returns a
object variable.

The . operator is another builtin function that takes two arguments:
The object being called and the name of the field being referenced.

internally a object is

object
	unsigned char entryCount
	class *prototype
	char *entryName
	variable *value
	[char *entryName
	variable *value]
	...

a class is represented internally using

class
	unsigned char entryCount
	char type
	char* entryName
	...

the type char describes the type of reference inside an object.
it may take one of the following values:

i: an integer
s: a string
r: a reference to another object

Trying to compare two object variables is the same as trying to comare the references
(pointers)
