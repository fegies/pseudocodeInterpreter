The arrays must be dynamically allocated even though their size is not
known even when they are created.

This leads to multiple options:
Implementation as a self-balancing tree
Implementation as a linked list
Assuming a fixed list size and reallocating if the list larger than assumed

A mixture of multiple approaches.

Chosen approach:
	A mixture of a linked list(for managing array parts)
	and a simple array.

On creation the array will always allocate from index 0 to the accessed number.
But at least ARRAYRESERVEMIN

All arrays are of the type variable*

The array linked list has the form

arrayHead
	unsigned int segmentSize
	variable* firstEntry
	arrayHead* nextSegment

The segment size specifies the number of variables stored in the array segment.
It is at least 1 large.

If an index larger than arrayHead is requested a new arrayHead is added and
at least ARRAYRESERVEMIN new variables reserved.

The header should contain both an access()
and a create() function
eventhough only the access() function will actually be called from the interpreter
